package com.datatheorem.mobileappsecurity.jenkins.plugin;

import hudson.model.FreeStyleBuild;
import hudson.model.FreeStyleProject;
import hudson.model.Result;
import org.junit.Rule;
import org.junit.Test;
import org.jvnet.hudson.test.JenkinsRule;

/**
 * Functional tests of the sendBuildToDataTheorem Publisher plugin.
 * <p>
 *     This class checks if the plugin can be added as a publisher action to a jenkins job
 *     Then it tests that the plugin can correctly find the file generated by a common build action
 * </p>
 */
public class SendBuildToDataTheoremPublisherTest {

    @Rule
    public JenkinsRule jenkins = new JenkinsRule();

    private final String buildName = "t*est-*.apk";
    private final boolean dontUpload = true;

    @Test
    public void testAddPluginToJob() throws Exception {
        /*
         * Check if the plugin can be added has a publisher action to a jenkins job
         */
        FreeStyleProject job = jenkins.createFreeStyleProject();
        SendBuildToDataTheoremPublisher sendBuilder = new SendBuildToDataTheoremPublisher(buildName, dontUpload);
        job.getPublishersList().add(sendBuilder);
        job = jenkins.configRoundtrip(job);

        SendBuildToDataTheoremPublisher lhs = new SendBuildToDataTheoremPublisher(buildName, dontUpload);
        jenkins.assertEqualDataBoundBeans(lhs, job.getPublishersList().get(0));
    }


    @Test
    public void testCreateAndFindBuild() throws Exception {
        /*
         * Check if the plugin can find a file generated by a common build action
         * The build action is a simple shell that create a test-1.12.45.apk
         */
        FreeStyleProject job = jenkins.createFreeStyleProject();
        job.getBuildersList().add(
                new hudson.tasks.Shell("#!/bin/bash\n touch test-1.12.45.apk"));

        SendBuildToDataTheoremPublisher sendBuilder = new SendBuildToDataTheoremPublisher(buildName, dontUpload);
        job.getPublishersList().add(sendBuilder);

        FreeStyleBuild completedBuild = jenkins.assertBuildStatusSuccess(job.scheduleBuild2(0));

        String expectedString = "Found the build at path:";
        jenkins.assertLogContains(expectedString, completedBuild);
    }

    @Test
    public void testWrongBuildName() throws Exception {
        /*
         * Check if the plugin can set the result to unstable if no build have been found
         */
        FreeStyleProject job = jenkins.createFreeStyleProject();
        job.getBuildersList().add(
                new hudson.tasks.Shell("#!/bin/bash\n " +
                        "touch test.apk"));

        SendBuildToDataTheoremPublisher sendBuilder = new SendBuildToDataTheoremPublisher(buildName, dontUpload);
        job.getPublishersList().add(sendBuilder);

        FreeStyleBuild completedBuild = jenkins.assertBuildStatus(Result.UNSTABLE, job.scheduleBuild2(0));

        String expectedString = "Unable to find any build with name";
        jenkins.assertLogContains(expectedString, completedBuild);
    }

}